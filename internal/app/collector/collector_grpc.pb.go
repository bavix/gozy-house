// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: collector.proto

package collector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorClient interface {
	// Method for sending events in a batch.
	// The limit must be set via ENV.
	// Events that fail validation are ignored.
	SendBeacon(ctx context.Context, in *Events, opts ...grpc.CallOption) (Collector_SendBeaconClient, error)
	// Validator in a real application is not desirable to use.
	// It is needed only for debugging.
	Validator(ctx context.Context, in *Event, opts ...grpc.CallOption) (Collector_ValidatorClient, error)
}

type collectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorClient(cc grpc.ClientConnInterface) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) SendBeacon(ctx context.Context, in *Events, opts ...grpc.CallOption) (Collector_SendBeaconClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[0], "/gozyhouse.collector.v1.Collector/SendBeacon", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorSendBeaconClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collector_SendBeaconClient interface {
	Recv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type collectorSendBeaconClient struct {
	grpc.ClientStream
}

func (x *collectorSendBeaconClient) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorClient) Validator(ctx context.Context, in *Event, opts ...grpc.CallOption) (Collector_ValidatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[1], "/gozyhouse.collector.v1.Collector/Validator", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorValidatorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collector_ValidatorClient interface {
	Recv() (*ValidationResult, error)
	grpc.ClientStream
}

type collectorValidatorClient struct {
	grpc.ClientStream
}

func (x *collectorValidatorClient) Recv() (*ValidationResult, error) {
	m := new(ValidationResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServer is the server API for Collector service.
// All implementations must embed UnimplementedCollectorServer
// for forward compatibility
type CollectorServer interface {
	// Method for sending events in a batch.
	// The limit must be set via ENV.
	// Events that fail validation are ignored.
	SendBeacon(*Events, Collector_SendBeaconServer) error
	// Validator in a real application is not desirable to use.
	// It is needed only for debugging.
	Validator(*Event, Collector_ValidatorServer) error
	mustEmbedUnimplementedCollectorServer()
}

// UnimplementedCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedCollectorServer struct {
}

func (UnimplementedCollectorServer) SendBeacon(*Events, Collector_SendBeaconServer) error {
	return status.Errorf(codes.Unimplemented, "method SendBeacon not implemented")
}
func (UnimplementedCollectorServer) Validator(*Event, Collector_ValidatorServer) error {
	return status.Errorf(codes.Unimplemented, "method Validator not implemented")
}
func (UnimplementedCollectorServer) mustEmbedUnimplementedCollectorServer() {}

// UnsafeCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServer will
// result in compilation errors.
type UnsafeCollectorServer interface {
	mustEmbedUnimplementedCollectorServer()
}

func RegisterCollectorServer(s grpc.ServiceRegistrar, srv CollectorServer) {
	s.RegisterService(&Collector_ServiceDesc, srv)
}

func _Collector_SendBeacon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Events)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectorServer).SendBeacon(m, &collectorSendBeaconServer{stream})
}

type Collector_SendBeaconServer interface {
	Send(*emptypb.Empty) error
	grpc.ServerStream
}

type collectorSendBeaconServer struct {
	grpc.ServerStream
}

func (x *collectorSendBeaconServer) Send(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _Collector_Validator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Event)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectorServer).Validator(m, &collectorValidatorServer{stream})
}

type Collector_ValidatorServer interface {
	Send(*ValidationResult) error
	grpc.ServerStream
}

type collectorValidatorServer struct {
	grpc.ServerStream
}

func (x *collectorValidatorServer) Send(m *ValidationResult) error {
	return x.ServerStream.SendMsg(m)
}

// Collector_ServiceDesc is the grpc.ServiceDesc for Collector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gozyhouse.collector.v1.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBeacon",
			Handler:       _Collector_SendBeacon_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Validator",
			Handler:       _Collector_Validator_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "collector.proto",
}
